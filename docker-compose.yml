version: '2.1'

services:
 eureka-server:
   build: eureka-server/
   depends_on:
     config-service:
       condition: service_healthy
   restart: always
   network_mode: "host"
   image: eureka-service
   hostname: localhost
   ports:
     - 8761:8761
   healthcheck:
     test: "exit 0"

 Neo4jDataModelling-Service:
   build: Neo4jDataModelling-Service/
   depends_on:
     config-service:
       condition: service_healthy
   restart: always
   network_mode: "host"
   image: neo4j-service
   hostname: localhost
   ports:
     - 8083:8083
   healthcheck:
     test: "exit 0"
 
 upstream-service:
   build: upstream-service/
   depends_on:
     config-service:
       condition: service_healthy
   restart: always
   network_mode: "host"
   image: upstream-service
   hostname: localhost
   ports:
     - 8081:8081
   healthcheck:
     test: "exit 0"

 downstream-service:
   build: downstream-service/
   depends_on:
     config-service:
       condition: service_healthy
   restart: always
   network_mode: "host"
   image: downstream-service
   hostname: localhost
   ports:
     - 8081:8081
   healthcheck:
     test: "exit 0"

 AcademicService:
   build: AcademicService/
   depends_on:
     config-service:
       condition: service_healthy
   restart: always
   network_mode: "host"
   image: academic-service
   hostname: localhost
   ports:
     - 8079:8079
   healthcheck:
     test: "exit 0"

 CertificationService:
   build: CertificationService/
   depends_on:
     config-service:
       condition: service_healthy
   restart: always
   network_mode: "host"
   image: certification-service
   hostname: localhost
   ports:
     - 8078:8078
   healthcheck:
     test: "exit 0"

 LocationService:
   build: LocationService/
   depends_on:
     config-service:
       condition: service_healthy
   restart: always
   network_mode: "host"
   image: location-service
   hostname: localhost
   ports:
     - 8082:8082
   healthcheck:
     test: "exit 0"

 PersonalInfoService:
   build: PersonalInfoService/
   depends_on:
     config-service:
       condition: service_healthy
   restart: always
   network_mode: "host"
   image: personalinfo-service
   hostname: localhost
   ports:
     - 8097:8097
   healthcheck:
     test: "exit 0"
 
 ProjectsService:
   build: ProjectsService/
   depends_on:
     config-service:
       condition: service_healthy
   restart: always
   network_mode: "host"
   image: project-service
   hostname: localhost
   ports:
     - 8094:8094
   healthcheck:
     test: "exit 0"

 SkillsService:
   build: SkillsService/
   depends_on:
     config-service:
       condition: service_healthy
   restart: always
   network_mode: "host"
   image: skill-service
   hostname: localhost
   ports:
     - 8074:8074
   healthcheck:
     test: "exit 0"

 config-service:
   build: config-service/
   restart: always
   network_mode: "host"
   image: config-service
   hostname: localhost
   ports:
     - 8084:8084
   healthcheck:
     test: "exit 0"

 api-gateway:
   build: zuul-apigateway/
   depends_on:
     config-service:
       condition: service_healthy
     eureka-server:
       condition: service_healthy
   restart: always
   network_mode: "host"
   image: zuul-service
   hostname: localhost
   ports:
     - 8762:8762
   healthcheck:
     test: "exit 0"
 userprofile-application:
   build: userprofileservice/
   depends_on:
     config-service:
       condition: service_healthy
   restart: always
   network_mode: "host"
   image: userprofile-service
   hostname: localhost
   ports:
     - 8085:8085
   healthcheck:
     test: "exit 0"

 user-authenticationservice:
   build: user-authenticationservice/
   depends_on:
     config-service:
       condition: service_healthy
   restart: always
   network_mode: "host"
   image: eureka-service
   hostname: localhost
   ports:
     - 3306:3306
   healthcheck:
     test: "exit 0"

zookeeper:
   image: wurstmeister/zookeeper
   ports:
     - "2181:2181"
   network_mode: "host"
   hostname: localhost
   restart: always
   healthcheck:
     test: "exit 0"

kafka:
   image: wurstmeister/kafka
   ports:
     - "9092:9092"
   environment:
     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://13.232.40.6:9092
     KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
     KAFKA_ZOOKEEPER_CONNECT: localhost:2181
   network_mode: "host"
   hostname: localhost
   depends_on:
     - zookeeper
   restart: always
   healthcheck:
     test: "exit 0"
mongodb:
   image: mongo
   container_name: "mongodb"
   volumes:
     - ./data/db:/data/db
   ports:
     - 27000:27017
   restart: always
   healthcheck:
     test: "exit 0"

mysql:
   image: mysql:5.7
   ports:
     - 3306:3306
   container_name: mysql
   mem_limit: 2g
   environment:
     - MYSQL_ROOT_PASSWORD=root
     - MYSQL_DATABASE=register
     - MYSQL_PASSWORD=root
     - MYSQL_USER=root
   volumes:
     - /opt/datasql:/var/lib/mysql
   network_mode: "host"
   hostname: localhost
   restart: always
   healthcheck:
     test: "exit 0"

neo4j:
   image: neo4j:latest
   ports:
     - "7474:7474"
     - "7687:7687"
   container_name: neo4j
   mem_limit: 1024m
   environment:
     - NEO4J_AUTH=neo4j/12345
#      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
#      - NEO4J_apoc_import_file_enabled=true
#      - NEO4J_dbms_shell_enabled=true
   volumes:
#      - ./plugins:/plugins
     - $HOME/neo4j/data:/data
#      - ./import:/import
   healthcheck:
     test: "exit 0"
